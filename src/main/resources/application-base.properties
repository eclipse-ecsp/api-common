#CORS Properties
cors.origin.allow=*
#Spring mongo properties
mongodb.hosts=localhost
mongodb.port=27018
mongodb.username=dev
mongodb.password=password
mongodb.auth.db=admin
mongodb.name=ecspdev
mongodb.pool.max.size=200
mongodb.max.wait.time.ms=60000
mongodb.connection.timeout.ms=60000
mongodb.socket.timeout.ms=60000
mongodb.max.connections.per.host=200
#mongodb.block.threads.allowed.multiplier=10
mongodb.read.preference=secondaryPreferred
morphia.map.packages=org.eclipse.ecsp
mongodb.server.selection.timeout=30000
mongodb.taggable.read.preference.enabled=false
mongodb.read.preference.tag=primary_region
#Kafka details
kafka.acks=all
kafka.batch.size=16384
kafka.linger.ms=50
kafka.key.serializer=org.apache.kafka.common.serialization.ByteArraySerializer
kafka.value.serializer=org.apache.kafka.common.serialization.ByteArraySerializer
kafka.buffer.memory=524288
kafka.broker.url=10.0.0.40:9092,10.0.0.218:9092,10.0.0.23:9092
kafka.producer.synchronous.push=false
kafka.request.timeout.ms=30000
kafka.delivery.timeout.ms=120000
#performance monitoring
performance.monitoring.enabled=true
# redis properties
# We have to declare redis properties here as it is getting eagerly loaded as part of the 'ignite-cache' dependency
# TODO: Load redis server lazily so that it will be initialized only if needed and we do not have to
# specify redis properties here as long as we don't need redis server functionality
redis.address=127.0.0.1:6379
redis.sentinels=
redis.master.name=
redis.dns.monitoring.interval=5000
redis.read.mode=SLAVE
redis.subscription.mode=SLAVE
redis.subscription.conn.min.idle.size=1
redis.subscription.conn.pool.size=50
redis.slave.conn.min.idle.size=32
redis.slave.pool.size=64
redis.master.conn.min.idle.size=32
redis.master.conn.pool.size=64
redis.idle.conn.timeout=10000
redis.conn.timeout=10000
redis.timeout=3000
redis.retry.attempts=3
redis.retry.interval=1500
redis.reconnection.timeout=3000
redis.failed.attempts=3
redis.database=0
redis.password=
redis.subscriptions.per.conn=5
redis.client.name=yellow
redis.conn.min.idle.size=32
redis.conn.pool.size=64
redis.cluster.masters=
redis.scan.interval=1000
retry.record.id.pattern=recordIds\\\"\\:\\[
#Kafka producer enabler config
kafka.producer.service.enabled=true
processing.duration.buckets=0.05,0.1,0.2,0.3,0.4,0.7,1,2.5,5,10,60
metrics.enabled=true
#Health Check parameters
health.mqtt.monitor.enabled=false
health.mongo.monitor.enabled=true
health.kafka.consumer.group.monitor.enabled=false
health.device.status.backdoor.monitor.enabled=false
health.dff.feed.backdoor.monitor.enabled=false
health.kafka.topics.monitor.enabled=false
health.redis.monitor.enabled=false
health.service.failure.retry.thrshold=20
health.service.failure.retry.interval.millis=500
health.service.retry.interval.millis=100
health.service.executor.shutdown.millis=2000
health.service.executor.initial.delay=120000
vehicle.owner.role=VO
redis.netty.threads=32
redis.decode.in.executor=true
redis.executor.threads=32
redis.keep.alive=true
redis.ping.connection.interval=60000
redis.tcp.no.delay=true
redis.transport.mode=NIO
base.package=org.eclipse.ecsp